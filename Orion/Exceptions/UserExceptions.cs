using System;

namespace Orion.Exceptions
{
	/// <summary>UserManagerException - An exception generated by the user manager.</summary>
	[Serializable]
	public class UserManagerException : Exception
	{
		/// <summary>Creates a new UserManagerException object.</summary>
		/// <param name="message">The message for the object.</param>
		/// <returns>A new UserManagerException object.</returns>
		public UserManagerException(string message)
			: base(message)
		{
		}

		/// <summary>Creates a new UserManagerObject with an internal exception.</summary>
		/// <param name="message">The message for the object.</param>
		/// <param name="inner">The inner exception for the object.</param>
		/// <returns>A new UserManagerException with a defined inner exception.</returns>
		public UserManagerException(string message, Exception inner)
			: base(message, inner)
		{
		}
	}

	/// <summary>A UserCollisionException object, used when a user already exists when attempting to create a new one.</summary>
	[Serializable]
	public class UserCollisionException : UserManagerException
	{
		/// <summary>Creates a new UserCollisionException object.</summary>
		/// <param name="name">The name of the user that already exists.</param>
		/// <returns>A UserCollisionException object with the user's name passed in the message.</returns>
		public UserCollisionException(string name)
			: base("User '" + name + "' already exists")
		{
		}
	}

	/// <summary>A UserNotFoundException, used when a user does not exist and a query failed as a result of it.</summary>
	[Serializable]
	public class UserNotFoundException : UserManagerException
	{
		/// <summary>Creates a new UserNotFoundException object, with the user's name in the message.</summary>
		/// <param name="name">The user's name to be pasesd in the message.</param>
		/// <returns>A new UserNotFoundException object with a message containing the user's name that does not exist.</returns>
		public UserNotFoundException(string name)
			: base("User '" + name + "' does not exist")
		{
		}
	}
}